// function c_content(){
// 	$('a.subcontent').click(function(){
// 		$('a').removeClass( 'active' );
// 		var x='#'+$(this).attr('id');
// 		$(x).addClass('active');
// 		var id=document.getElementsByClassName("subcontent active nav-link")[0].id;
// 		if(id=='1')
// 			a='<p><b>[Học MySQL cơ bản và nâng cao]</b>MySQL là hệ thống quản lý cơ sở dữ liệu nguồn mở phổ biến nhất. MySQL là một trong những RDBMS tốt nhất đang được sử dụng để phát triển các ứng dụng phần mềm trên Web.</p>\n' +
// 				'<p>Loạt bài hướng dẫn này cung cấp cho bạn kiến thức cơ bản về MySQL, cung cấp nhiều ví dụ minh họa giúp bạn hiểu sâu hơn về các khái niệm, lệnh, hay mệnh đề trong MySQL được trình bày trong loạt bài này.</p>'
// 		else if(id=='caidat')
// 			a='<b>Cài đặt IDE để biên dịch và thực thi C++</b><br/>Cài đặt IDE để biên dịch và thực thi C++ khá giống với C, bạn có thể tham khảo Cài đặt C để biết cách làm chi tiết nha.<br/>Cài đặt để chạy trên Command Prompt<br/>Nếu bạn muốn cài đặt để biên dịch và chạy trên Command Prompt, thì bạn nên đọc phần sau đây.<br/>Nếu bạn muốn cài đặt môi trường C++, bạn cần hai phần mềm có sẵn trong máy sau đây:<br/><br/><b>Text Editor</b><br/>Nó sẽ được sử dụng để soạn chương trình của bạn. Ví dụ như Windows Notepad, OS Edit command, Brief, Epsilon, EMACS và Vim hoặc Vi.<br/>Tên và phiên bản của Text Editor có thể đa dạng trên các hệ điều hành khác nhau. Ví dụ, Notepad sẽ được sử dụng trên Windows và Vim hoặc Vi có thể được sử dụng trên Windows cũng như Linux hoặc UNIX.<br/>Các file, mà bạn tạo với editor này, được gọi là các source file và với C++, chúng được đặt tên với đuôi mở rộng là .cpp, .cp, hoặc .c.<br/>Trước khi bắt đầu lập trình, đảm bảo rằng bạn có một Text editor và bạn có đủ kinh nghiệm để soạn một chương trình C++.<br/><br/><b>C++ Compiler:</b><br/>C++ Compiler được sử dụng để biên dịch source code của bạn thành chương trình có thể thực thi.<br/>Hầu hết C++ compiler không quan tâm phần đuôi mở rộng bạn cung cấp cho source code, nhưng nếu bạn không xác định, thì theo mặc định, nó sẽ sử dụng đuôi là .cpp.<br/>Compiler được sử dụng thường xuyên nhất là GNU C/C++ compiler, hoặc bạn có thể sử dụng các Compiler khác từ HP hoặc Solaris nếu bạn có Hệ điều hành tương ứng.<br/><br/><b>Cài đặt GNU C/C++ Compiler</b><br/><b>Cài đặt trên UNIX/Linux</b><br/>Nếu bạn đang sử dụng Linux hoặc UNIX, thì kiểm tra xem GCC đã được cài đặt trên hệ thống chưa bằng việc nhập lệnh sau tại dòng lệnh (command line):<br/>$ g++ -v<br/>Nếu bạn đã cài đặt GCC, thì nó sẽ in thông báo sau:<br/>Using built-in specs. <br/> Target: i386-redhat-linux <br/> Configured with: ../configure --prefix=/usr ....... <br/> Thread model: posix <br/> gcc version 4.1.2 20080704 (Red Hat 4.1.2-46)<br/>Nếu GCC chưa được cài đặt, bạn cần phải cài đặt theo hướng dẫn có tại: http://gcc.gnu.org/install/<br/><br/><b>Cài đặt trên Mac OS X</b><br/>Nếu bạn sử dụng Mac OS X, cách đơn giản nhất để cài đặt GCC là tải môi trường phát triển Xcode từ Website của Applet và theo các chỉ dẫn.<br/>Bạn có thể tải Xcode từ: developer.apple.com/xcode/<br/><br/><b>Cài đặt trên Windows</b><br/>Để cài đặt GCC trên Windows, bạn cần cài đặt MinGW. Để cài đặt MinGW, bạn truy cập: mingw.org, và từ đó tới trang để tải MinGW. Tải phiên bản mới nhất của MinGW, sẽ có tên là MinGW-<version>.exe.<br/>Trong khi cài đặt MinGW, tối thiểu bạn phải cài đặt gcc-core, gcc-g++, binutils, và MinGW runtime.<br/>Thêm thư mục phụ bin của MinGW tới biến môi trường PATH, để mà bạn có thể xác định các tool trên command line bởi các tên đơn giản của chúng.<br/>Khi việc cài đặt hoàn tất, bạn có thể chạy gcc, g++, ar, ranlib, dlltool, và một số GNU tool khác từ Windows command line.';
// 		else if(id=='cuphap')
// 			a='<b>Cú pháp C ++</b><br/>Thí dụ<br/>#include <iostream><br/>using namespace std;<br/><br/>int main() {<br/>  cout << "Hello World!";<br/>  return 0;<br/>}<br/><br/>Ví dụ giải thích<br/>Dòng 1: #include <iostream> là một thư viện tệp tiêu đề cho phép chúng ta làm việc với các đối tượng đầu vào và đầu ra, chẳng hạn như cout(được sử dụng trong dòng 5). Các tệp tiêu đề thêm chức năng cho các chương trình C ++.<br/>Dòng 2: using namespace std có nghĩa là chúng ta có thể sử dụng tên cho các đối tượng và biến từ thư viện chuẩn.<br/><br/>Đừng lo lắng nếu bạn không hiểu cách thức #include <iostream>và using namespace stdhoạt động. Chỉ cần nghĩ về nó như một cái gì đó (gần như) luôn xuất hiện trong chương trình của bạn.<br/><br/>Dòng 3: Một dòng trống. C ++ bỏ qua khoảng trắng.<br/>Dòng 4: Một thứ khác luôn xuất hiện trong chương trình C ++ là int main(). Đây được gọi là một chức năng . Bất kỳ mã nào trong dấu ngoặc nhọn của nó {}sẽ được thực thi.<br/>Dòng 5: cout (phát âm là "xem ra") là một đối tượng được sử dụng để xuất / in văn bản. Trong ví dụ của chúng tôi, nó sẽ xuất ra "Hello World".<br/><br/>Lưu ý: Mỗi câu lệnh C ++ kết thúc bằng dấu chấm phẩy ;.<br/>Lưu ý: Phần thân của int main()cũng có thể được viết là:<br/>int main () { cout << "Hello World! "; return 0; }<br/><br/><b>Ghi nhớ: Trình biên dịch bỏ qua khoảng trắng. Tuy nhiên, nhiều dòng làm cho mã dễ đọc hơn.</b><br/><br/>Dòng 6: return 0 kết thúc chức năng chính.<br/>Bỏ qua không gian tên<br/>Bạn có thể thấy một số chương trình C ++ chạy mà không có thư viện không gian tên tiêu chuẩn. Các using namespace stddòng có thể được bỏ qua và thay thế bằng các stdtừ khóa, tiếp theo là các ::nhà điều hành cho một số đối tượng:<br/>Thí dụ<br/>#include <iostream><br/>int main() {<br/>  std::cout << "Hello World!";<br/>  return 0;<br/>}';
// 		else if(id=='nhapxuat')
// 			a='Output C ++ (Văn bản in)<br/>Đối couttượng, cùng với << toán tử, được sử dụng để xuất giá trị / in văn bản:<br/><br/>Thí dụ<br/>#include <iostream><br/>using namespace std;<br/><br/>int main() {<br/>  cout << "Hello World!";<br/>  return 0;<br/>}<br/>Bạn có thể thêm nhiều coutđối tượng như bạn muốn. Tuy nhiên, lưu ý rằng nó không chèn một dòng mới vào cuối Output:<br/><br/>Thí dụ<br/>#include <iostream><br/>using namespace std;<br/><br/>int main() {<br/>  cout << "Hello World!";<br/>  cout << "I am learning C++";<br/>  return 0;<br/>}<br/>Dòng mới<br/>Để chèn một dòng mới, bạn có thể sử dụng \nký tự:<br/><br/>Thí dụ<br/>#include <iostream><br/>using namespace std;<br/><br/>int main() {<br/>  cout << "Hello World! \n";<br/>  cout << "I am learning C++";<br/>  return 0;<br/>}<br/>Mẹo: Hai \nký tự sau nhau sẽ tạo một dòng trống:<br/><br/>Thí dụ<br/>#include <iostream><br/>using namespace std;<br/><br/>int main() {<br/>  cout << "Hello World! \n\n";<br/>  cout << "I am learning C++";<br/>  return 0;<br/>}<br/>Một cách khác để chèn một dòng mới, là với trình endlthao tác:<br/><br/>Thí dụ<br/>#include <iostream><br/>using namespace std;<br/><br/>int main() {<br/>  cout << "Hello World!" << endl;<br/>  cout << "I am learning C++";<br/>  return 0;<br/>}<br/>Cả hai \nvà endl được sử dụng để phá vỡ dòng. Tuy nhiên, \nđược sử dụng thường xuyên hơn và là cách ưa thích.<br/>Intput người dùng C ++<br/>Intput người dùng C ++<br/>Bạn đã học coutđược sử dụng để xuất giá trị (in). Bây giờ chúng tôi sẽ sử dụng cinđể có được Intput của người dùng.<br/><br/>cinlà một biến được xác định trước để đọc dữ liệu từ bàn phím với toán tử trích xuất ( >>).<br/><br/>Trong ví dụ sau, người dùng có thể nhập một số, được lưu trong biến x. Sau đó, chúng tôi in giá trị của x:<br/><br/>Thí dụ<br/>int x; <br/>cout << "Type a number: "; // Type a number and press enter<br/>cin >> x; // Get user input from the keyboard<br/>cout << "Your number is: " << x; // Display the input value<br/>Điều tốt để biết<br/>coutđược phát âm là "xem ra". Được sử dụng cho đầu ra và sử dụng toán tử chèn ( <<)<br/><br/>cinđược phát âm là "nhìn thấy". Được sử dụng cho Intput và sử dụng toán tử trích xuất ( >>)<br/><br/>Trong ví dụ này, người dùng cần nhập hai số và sau đó chúng tôi in tổng:<br/><br/>Thí dụ<br/>int x, y;<br/>int sum;<br/>cout << "Type a number: ";<br/>cin >> x;<br/>cout << "Type another number: ";<br/>cin >> y;<br/>sum = x + y;<br/>cout << "Sum is: " << sum;';
// 		else if(id=='comment')
// 			a='Nhận xét C ++<br/>Nhận xét C ++<br/>Nhận xét có thể được sử dụng để giải thích mã C ++ và để dễ đọc hơn. Nó cũng có thể được sử dụng để ngăn chặn việc thực thi khi kiểm tra mã thay thế. Nhận xét có thể được xếp hàng đơn hoặc nhiều dòng.<br/><br/>Nhận xét một dòng bắt đầu bằng hai dấu gạch chéo ( //).<br/><br/>Bất kỳ văn bản nào giữa //và cuối dòng đều bị trình biên dịch bỏ qua (sẽ không được thực thi).<br/><br/>Ví dụ này sử dụng một nhận xét một dòng trước một dòng mã:<br/><br/>Thí dụ<br/>// This is a comment<br/>cout << "Hello World!";<br/>Ví dụ này sử dụng một nhận xét một dòng ở cuối dòng mã:<br/><br/>Thí dụ<br/>cout << "Hello World!"; // This is a comment<br/>Nhận xét nhiều dòng của C ++<br/>Nhận xét nhiều dòng bắt đầu bằng /*và kết thúc bằng */.<br/><br/>Bất kỳ văn bản nào giữa /*và */sẽ bị bỏ qua bởi trình biên dịch:<br/><br/>Thí dụ<br/>/* The code below will print the words Hello World!<br/>to the screen, and it is amazing */<br/>cout << "Hello World!";<br/>Bình luận đơn hay đa dòng?<br/>Nó phụ thuộc vào bạn mà bạn muốn sử dụng. Thông thường, chúng tôi sử dụng //cho các bình luận ngắn, và /* */lâu hơn.<br/>';
// 		else if(id=='bien')
// 			a='Biến C ++<br/>Biến C ++<br/>Các biến là các thùng chứa để lưu trữ giá trị dữ liệu.<br/><br/>Trong C ++, có các loại biến khác nhau (được xác định bằng các từ khóa khác nhau), ví dụ:<br/><br/>int - lưu số nguyên (số nguyên), không có số thập phân, chẳng hạn như 123 hoặc -123<br/>double - lưu trữ số dấu phẩy động, với số thập phân, chẳng hạn như 19,99 hoặc -19,99<br/>char- lưu trữ các ký tự đơn, chẳng hạn như \'a\' hoặc \'B\'. Giá trị Char được bao quanh bởi dấu ngoặc đơn<br/>string- lưu trữ văn bản, chẳng hạn như "Hello World". Các giá trị chuỗi được bao quanh bởi dấu ngoặc kép<br/>bool - lưu trữ các giá trị với hai trạng thái: đúng hoặc sai<br/>Khai báo (Tạo) Biến<br/>Để tạo một biến, bạn phải chỉ định loại và gán cho nó một giá trị:<br/><br/>Cú pháp<br/>type variable = value;<br/>Trong đó loại là một trong các loại C ++ (chẳng hạn như int) và biến là tên của biến (chẳng hạn như x hoặc myName ). Dấu bằng được sử dụng để gán giá trị cho biến.<br/><br/>Để tạo một biến nên lưu trữ một số, hãy xem ví dụ sau:<br/><br/>Thí dụ<br/>Tạo một biến gọi là myNum loại intvà gán cho nó giá trị 15 :<br/><br/>int myNum = 15;<br/>cout << myNum;<br/>Bạn cũng có thể khai báo một biến mà không cần gán giá trị và gán giá trị sau:<br/><br/>Thí dụ<br/>int myNum;<br/>myNum = 15;<br/>cout << myNum;<br/>Lưu ý rằng nếu bạn gán một giá trị mới cho một biến hiện có, nó sẽ ghi đè lên giá trị trước đó:<br/><br/>Thí dụ<br/>int myNum = 15;  // myNum is 15<br/>myNum = 10;  // Now myNum is 10<br/>cout << myNum;  // Outputs 10<br/>Hằng số<br/>Tuy nhiên, bạn có thể thêm consttừ khóa nếu bạn không muốn người khác (hoặc chính mình) ghi đè các giá trị hiện có (điều này sẽ khai báo biến là "hằng", có nghĩa là không thể thay đổi và chỉ đọc ):<br/><br/>Thí dụ<br/>const int myNum = 15;  // myNum will always be 15<br/>myNum = 10;  // error: assignment of read-only variable \'myNum\'<br/>Các loại khác<br/>Trình diễn các loại dữ liệu khác:<br/><br/>Thí dụ<br/>int myNum = 5;               // Integer (whole number without decimals)<br/>double myFloatNum = 5.99;    // Floating point number (with decimals)<br/>char myLetter = \'D\';         // Character<br/>string myText = "Hello";     // String (text)<br/>bool myBoolean = true;       // Boolean (true or false)<br/>Bạn sẽ tìm hiểu thêm về các loại riêng lẻ trong chương Kiểu dữ liệu .<br/><br/>Hiển thị biến<br/>Đối couttượng được sử dụng cùng với << toán tử để hiển thị các biến.<br/><br/>Để kết hợp cả văn bản và một biến, hãy tách chúng với << toán tử:<br/><br/>Thí dụ<br/>int myAge = 35;<br/>cout << "I am " << myAge << " years old.";<br/>Thêm các biến cùng nhau<br/>Để thêm một biến vào một biến khác, bạn có thể sử dụng + toán tử:<br/><br/>Thí dụ<br/>int x = 5;<br/>int y = 6;<br/>int sum = x + y;<br/>cout << sum;<br/>Khai báo nhiều biến<br/>Để khai báo nhiều hơn một biến cùng loại , bạn có thể sử dụng danh sách được phân tách bằng dấu phẩy:<br/><br/>Thí dụ<br/>int x = 5, y = 6, z = 50;<br/>cout << x + y + z;<br/>Định danh C ++<br/>Tất cả các biến C ++ phải được xác định bằng các tên duy nhất .<br/><br/>Những tên duy nhất được gọi là định danh .<br/><br/>Mã định danh có thể là tên ngắn (như x và y) hoặc tên mô tả nhiều hơn (tuổi, tổng, TotalVolume).<br/><br/>Lưu ý: Nên sử dụng tên mô tả để tạo mã dễ hiểu và có thể duy trì.<br/><br/>Các quy tắc chung để xây dựng tên cho các biến (định danh duy nhất) là:<br/><br/>Tên có thể chứa chữ cái, chữ số và dấu gạch dưới<br/>Tên phải bắt đầu bằng một chữ cái hoặc dấu gạch dưới (_)<br/>Tên có phân biệt chữ hoa chữ thường ( myVarvà myvarlà các biến khác nhau)<br/>Tên không thể chứa khoảng trắng hoặc ký tự đặc biệt như !, #,%, V.v.<br/>Các từ dành riêng (như từ khóa C ++, chẳng hạn như int) không thể được sử dụng làm tên<br/><br/>';
// 		else if(id=='kieudulieu')
// 			a='Kiểu dữ liệu C ++<br/>Kiểu dữ liệu C ++<br/>Như đã giải thích trong chương Biến , một biến trong C ++ phải là kiểu dữ liệu được chỉ định:<br/><br/>Thí dụ<br/>int myNum = 5;               // Integer (whole number)<br/>float myFloatNum = 5.99;     // Floating point number<br/>double myDoubleNum = 9.98;   // Floating point number<br/>char myLetter = \'D\';         // Character<br/>bool myBoolean = true;       // Boolean<br/>string myText = "Hello";     // String<br/>Kiểu dữ liệu cơ bản<br/>Kiểu dữ liệu chỉ định kích thước và loại thông tin mà biến sẽ lưu trữ:<br/><br/>Data Type	Size	Description<br/>int	4 bytes	Stores whole numbers, without decimals<br/>float	4 bytes	Stores fractional numbers, containing one or more decimals. Sufficient for storing 7 decimal digits<br/>double	8 bytes	Stores fractional numbers, containing one or more decimals. Sufficient for storing 15 decimal digits<br/>boolean	1 byte	Stores true or false values<br/>char	1 byte	Stores a single character/letter/number, or ASCII values<br/>Sử dụng intkhi bạn cần lưu trữ toàn bộ số mà không cần số thập phân, như 35 hoặc 1000 và floathoặc doublekhi bạn cần số dấu phẩy động (có số thập phân), như 9,99 hoặc 3.14515.<br/><br/>int<br/>int myNum = 1000;<br/>cout << myNum;<br/>Phao nổi<br/>float myNum = 5.75;<br/>cout << myNum;<br/>gấp đôi<br/>double myNum = 19.99;<br/>cout << myNum;<br/>float so với double<br/><br/>Độ chính xác của giá trị dấu phẩy động cho biết giá trị có thể có bao nhiêu chữ số sau dấu thập phân. Độ chính xác floatchỉ là sáu hoặc bảy chữ số thập phân, trong khi doublecác biến có độ chính xác khoảng 15 chữ số. Do đó, an toàn hơn để sử dụng doublecho hầu hết các tính toán.<br/><br/>Số khoa học<br/>Số dấu phẩy động cũng có thể là số khoa học có "e" để biểu thị sức mạnh của 10:<br/><br/>Thí dụ<br/>float f1 = 35e3;<br/>double d1 = 12E4;<br/>cout << f1;<br/>cout << d1;<br/>Booleans<br/>Một kiểu dữ liệu boolean được khai báo bằng booltừ khóa và chỉ có thể lấy các giá trị truehoặc false. Khi giá trị được trả về, true = 1và false = 0.<br/><br/>Thí dụ<br/>bool isCodingFun = true;<br/>bool isFishTasty = false;<br/>cout << isCodingFun;  // Outputs 1 (true)<br/>cout << isFishTasty;  // Outputs 0 (false)<br/>Các giá trị Boolean chủ yếu được sử dụng để kiểm tra có điều kiện, bạn sẽ tìm hiểu thêm về chương sau.<br/><br/>Nhân vật<br/>Các charkiểu dữ liệu được sử dụng để lưu trữ một đơn nhân vật. Ký tự phải được bao quanh bởi các dấu ngoặc đơn, như \'A\' hoặc \'c\':<br/><br/>Thí dụ<br/>char myGrade = \'B\';<br/>cout << myGrade;<br/>Ngoài ra, bạn có thể sử dụng các giá trị ASCII để hiển thị các ký tự nhất định:<br/><br/>Thí dụ<br/>char a = 65, b = 66, c = 67;<br/>cout << a;<br/>cout << b;<br/>cout << c;<br/>Mẹo: Có thể tìm thấy danh sách tất cả các giá trị ASCII trong Tham chiếu Bảng ASCII của chúng tôi .<br/><br/>Dây<br/>Các stringloại được sử dụng để lưu trữ một chuỗi các ký tự (text). Đây không phải là một loại tích hợp, nhưng nó hoạt động như một trong cách sử dụng cơ bản nhất của nó. Các giá trị chuỗi phải được bao quanh bởi dấu ngoặc kép:<br/><br/>Thí dụ<br/>string greeting = "Hello";<br/>cout << greeting;<br/>Để sử dụng chuỗi, bạn phải bao gồm một tệp tiêu đề bổ sung trong mã nguồn, <string>thư viện:<br/><br/>Thí dụ<br/>// Include the string library<br/>#include <string><br/><br/>// Create a string variable<br/>string greeting = "Hello";<br/><br/>// Output string value<br/>cout << greeting;<br/>';
// 		else if(id=='toantu')
// 			a='Toán tử C ++<br/>Toán tử C ++<br/>Các toán tử được sử dụng để thực hiện các hoạt động trên các biến và giá trị.<br/><br/>Trong ví dụ dưới đây, chúng tôi sử dụng + toán tử để cộng hai giá trị lại với nhau:<br/><br/>Thí dụ<br/>int x = 100 + 50;<br/>Mặc dù +toán tử thường được sử dụng để cộng hai giá trị với nhau, như trong ví dụ trên, nó cũng có thể được sử dụng để thêm một biến và một giá trị, hoặc một biến và một biến khác:<br/><br/>Thí dụ<br/>int sum1 = 100 + 50;        // 150 (100 + 50)<br/>int sum2 = sum1 + 250;      // 400 (150 + 250)<br/>int sum3 = sum2 + sum2;     // 800 (400 + 400)<br/>C ++ chia các toán tử thành các nhóm sau:<br/><br/>Toán tử số học<br/>Toán tử chuyển nhượng<br/>Toán tử so sánh<br/>Toán tử logic<br/>Toán tử bitwise<br/>Toán tử số học<br/>Toán tử số học được sử dụng để thực hiện các phép toán phổ biến.<br/><br/>Operator	Name	Description	Example	Try it<br/>+	Addition	Adds together two values	x + y	<br/>-	Subtraction	Subtracts one value from another	x - y	<br/>*	Multiplication	Multiplies two values	x * y	<br/>/	Division	Divides one value from another	x / y	<br/>%	Modulus	Returns the division remainder	x % y	<br/>++	Increment	Increases the value of a variable by 1	++x	<br/>--	Decrement	Decreases the value of a variable by 1	--x	<br/>Toán tử chuyển nhượng C ++<br/>Toán tử gán được sử dụng để gán giá trị cho các biến.<br/><br/>Trong ví dụ dưới đây, chúng tôi sử dụng toán tử gán ( =) để gán giá trị 10 cho một biến có tên là x :<br/><br/>Thí dụ<br/>int x = 10;<br/>Các nhiệm vụ bổ sung điều hành ( +=) thêm một giá trị cho một biến:<br/><br/>Thí dụ<br/>int x = 10;<br/>x += 5;<br/>';
// 		else if(id=='string')
// 			a='String C ++<br/>String C ++<br/>String được sử dụng để lưu trữ văn bản.<br/><br/>Một stringbiến chứa một tập hợp các ký tự được bao quanh bởi dấu ngoặc kép:<br/><br/>Thí dụ<br/>Tạo một biến kiểu stringvà gán cho nó một giá trị:<br/><br/>string greeting = "Hello";<br/>Để sử dụng String, bạn phải bao gồm một tệp tiêu đề bổ sung trong mã nguồn, <string>thư viện:<br/><br/>Thí dụ<br/>// Include the string library<br/>#include <string><br/><br/>// Create a string variable<br/>string greeting = "Hello";<br/>Nối String<br/>Các +nhà điều hành có thể được sử dụng giữa các String để thêm chúng lại với nhau để tạo ra một String mới. Điều này được gọi là nối :<br/><br/>Thí dụ<br/>string firstName = "John ";<br/>string lastName = "Doe";<br/>string fullName = firstName + lastName;<br/>cout << fullName;<br/>Lưu ý rằng chúng tôi đã thêm một khoảng trắng sau FirstName để tạo khoảng trắng giữa John và Doe trên đầu ra.<br/><br/>Chiều dài String<br/>Một String trong C ++ thực sự là một đối tượng, chứa các hàm có thể thực hiện các hoạt động nhất định trên String. Ví dụ, độ dài của String có thể được tìm thấy với length() hàm:<br/><br/>Thí dụ<br/>string txt = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";<br/>cout << "The length of the txt string is: " << txt.length();<br/>String truy cập<br/>Bạn có thể truy cập các ký tự trong một String bằng cách tham khảo số chỉ mục của nó trong dấu ngoặc vuông [].<br/><br/>Ví dụ này in ký tự đầu tiên trong myString :<br/><br/>Thí dụ<br/>string myString = "Hello";<br/>cout << myString[0];<br/>// Outputs H<br/>Lưu ý: Chỉ mục String bắt đầu bằng 0: [0] là ký tự đầu tiên. [1] là nhân vật thứ hai, v.v.<br/><br/>Ví dụ này in ký tự thứ hai trong myString :<br/><br/>Thí dụ<br/>string myString = "Hello";<br/>cout << myString[1];<br/>// Outputs e<br/>Thay đổi ký tự String<br/>Để thay đổi giá trị của một ký tự cụ thể trong String, hãy tham khảo số chỉ mục và sử dụng dấu ngoặc đơn:<br/><br/>Thí dụ<br/>string myString = "Hello";<br/>myString[0] = \'J\';<br/>cout << myString;<br/>// Outputs Jello instead of Hello<br/>String nhập của người dùng<br/>Có thể sử dụng toán tử trích xuất >>trên cinđể hiển thị một String được nhập bởi người dùng:<br/><br/>Thí dụ<br/>string firstName;<br/>cout << "Type your first name: ";<br/>cin >> firstName; // get user input from the keyboard<br/>cout << "Your name is: " << firstName;<br/><br/>// Type your first name: John<br/>// Your name is: John<br/>Tuy nhiên, cincoi một khoảng trắng (khoảng trắng, tab, v.v.) là ký tự kết thúc, có nghĩa là nó chỉ có thể hiển thị một từ duy nhất (ngay cả khi bạn nhập nhiều từ):<br/><br/>Thí dụ<br/>string fullName;<br/>cout << "Type your full name: ";<br/>cin >> fullName;<br/>cout << "Your name is: " << fullName;<br/><br/>// Type your full name: John Doe<br/>// Your name is: John<br/>Từ ví dụ trên, bạn sẽ mong đợi chương trình in "John Doe", nhưng nó chỉ in "John".<br/><br/>Đó là lý do tại sao, khi làm việc với các String, chúng ta thường sử dụng getline() hàm để đọc một dòng văn bản. Nó cinlà tham số đầu tiên và biến String là thứ hai:<br/><br/>Thí dụ<br/>string fullName;<br/>cout << "Type your full name: ";<br/>getline (cin, fullName);<br/>cout << "Your name is: " << fullName;<br/><br/>// Type your full name: John Doe<br/>// Your name is: John Doe<br/>Thêm số và String<br/>CẢNH BÁO!<br/><br/>C ++ sử dụng +toán tử cho cả phép cộng và phép nối.<br/><br/>Số được thêm vào. Các String được nối.<br/><br/>Nếu bạn thêm hai số, kết quả sẽ là một số:<br/><br/>Thí dụ<br/>int x = 10;<br/>int y = 20;<br/>int z = x + y;      // z will be 30 (an integer)<br/>Nếu bạn thêm hai String, kết quả sẽ là nối String:<br/><br/>Thí dụ<br/>string x = "10";<br/>string y = "20";<br/>string z = x + y;   // z will be 1020 (a string)<br/>Nếu bạn cố thêm số vào String, sẽ xảy ra lỗi:<br/><br/>Thí dụ<br/>string x = "10";<br/>int y = 20;<br/>string z = x + y;<br/>Bỏ qua không gian tên<br/>Bạn có thể thấy một số chương trình C ++ chạy mà không có thư viện không gian tên tiêu chuẩn. Các using namespace stddòng có thể được bỏ qua và thay thế bằng các stdtừ khóa, tiếp theo là các ::nhà điều hành cho string(và cout) các đối tượng:<br/><br/>Thí dụ<br/>#include <iostream><br/>#include <string><br/><br/>int main() {<br/>  std::string greeting = "Hello";<br/>  std::cout << greeting;<br/>  return 0;<br/>}<br/>Tùy thuộc vào bạn nếu bạn muốn bao gồm thư viện không gian tên tiêu chuẩn hay không.';
// 		else if(id=='math')
// 			a='Math C ++<br/>Math C ++<br/>C ++ có nhiều chức năng cho phép bạn thực hiện các nhiệm vụ Math học trên các số.<br/><br/>Tối đa và tối thiểu<br/>Các chức năng có thể được sử dụng để tìm ra giá trị cao nhất của x và y :max(x,y)<br/><br/>Thí dụ<br/>cout << max(5, 10);<br/>Và hàm có thể được sử dụng để tìm giá trị thấp nhất của x và y :min(x,y)<br/><br/>Thí dụ<br/>cout << min(5, 10);<br/>Tiêu đề C ++ <cmath><br/>Các hàm khác, chẳng hạn như sqrt(căn bậc hai), round(làm tròn một số) và log (logarit tự nhiên), có thể được tìm thấy trong <cmath>tệp tiêu đề:<br/><br/>Thí dụ<br/>// Include the cmath library<br/>#include <cmath><br/><br/>cout << sqrt(64);<br/>cout << round(2.6);<br/>cout << log(2);<br/>Các hàm Math học khác<br/>Một danh sách các hàm Math phổ biến khác (từ <cmath>thư viện) có thể được tìm thấy trong bảng dưới đây:<br/><br/>Function	Description<br/>abs(x)	Returns the absolute value of x<br/>acos(x)	Returns the arccosine of x, in radians<br/>asin(x)	Returns the arcsine of x, in radians<br/>atan(x)	Returns the arctangent of x, in radians<br/>cbrt(x)	Returns the cube root of x<br/>ceil(x)	Returns the value of x rounded up to its nearest integer<br/>cos(x)	Returns the cosine of x, in radians<br/>cosh(x)	Returns the hyperbolic cosine of x, in radians<br/>exp(x)	Returns the value of Ex<br/>expm1(x)	Returns ex -1<br/>fabs(x)	Returns the absolute value of a floating x<br/>fdim(x, y)	Returns the positive difference between x and y<br/>floor(x)	Returns the value of x rounded down to its nearest integer<br/>hypot(x, y)	Returns sqrt(x2 +y2) without intermediate overflow or underflow<br/>fma(x, y, z)	Returns x*y+z without losing precision<br/>fmax(x, y)	Returns the highest value of a floating x and y<br/>fmin(x, y)	Returns the lowest value of a floating x and y<br/>fmod(x, y)	Returns the floating point remainder of x/y<br/>pow(x, y)	Returns the value of x to the power of y<br/>sin(x)	Returns the sine of x (x is in radians)<br/>sinh(x)	Returns the hyperbolic sine of a double value<br/>tan(x)	Returns the tangent of an angle<br/>tanh(x)	Returns the hyperbolic tangent of a double value<br/>';
// 		else if(id=='boolean')
// 			a='Giá trị Boolean<br/>Một biến boolean được khai báo bằng booltừ khóa và chỉ có thể lấy các giá trị truehoặc false:<br/><br/>Thí dụ<br/>bool isCodingFun = true;<br/>bool isFishTasty = false;<br/>cout << isCodingFun;  // Outputs 1 (true)<br/>cout << isFishTasty;  // Outputs 0 (false)<br/>Từ ví dụ trên, bạn có thể đọc rằng truegiá trị trả về 1và falsetrả về 0.<br/><br/>Tuy nhiên, thông thường hơn là trả về các giá trị boolean từ các biểu thức boolean (xem bên dưới).<br/><br/>Biểu thức Boolean<br/>Một biểu thức Boolean là một ++ biểu C mà trả về một giá trị boolean: 1(true) hoặc 0(false).<br/><br/>Bạn có thể sử dụng toán tử so sánh, chẳng hạn như toán tử lớn hơn ( >) để tìm hiểu xem một biểu thức (hoặc một biến) có đúng không:<br/><br/>Thí dụ<br/>int x = 10;<br/>int y = 9;<br/>cout << (x > y); // returns 1 (true), because 10 is higher than 9<br/>Hoặc thậm chí dễ dàng hơn:<br/><br/>Thí dụ<br/>cout << (10 > 9); // returns 1 (true), because 10 is higher than 9<br/>Trong các ví dụ dưới đây, chúng tôi sử dụng toán tử bằng ( ==) để đánh giá biểu thức:<br/><br/>Thí dụ<br/>int x = 10;<br/>cout << (x == 10);  // returns 1 (true), because the value of x is equal to 10<br/>Thí dụ<br/>cout << (10 == 15);  // returns 0 (false), because 10 is not equal to 15<br/>Booleans là cơ sở cho tất cả các so sánh và điều kiện C ++.<br/><br/>Bạn sẽ tìm hiểu thêm về các điều kiện (nếu ... khác) trong chương tiếp theo.<br/>';
// 		else if(id=='caudieukien')
// 			a='Điều kiện C ++ và nếu báo cáo<br/>C ++ hỗ trợ các điều kiện logic thông thường từ toán học:<br/><br/>Ít hơn: a <b<br/>Nhỏ hơn hoặc bằng: a <= b<br/>Lớn hơn: a> b<br/>Lớn hơn hoặc bằng: a> = b<br/>Bằng a == b<br/>Không bằng: a! = B<br/>Bạn có thể sử dụng các điều kiện này để thực hiện các hành động khác nhau cho các quyết định khác nhau.<br/><br/>C ++ có các câu điều kiện sau:<br/><br/>Sử dụng ifđể chỉ định một khối mã sẽ được thực thi, nếu một điều kiện được chỉ định là đúng<br/>Sử dụng elseđể chỉ định một khối mã sẽ được thực thi, nếu điều kiện tương tự là sai<br/>Sử dụng else ifđể chỉ định một điều kiện mới để kiểm tra, nếu điều kiện đầu tiên là sai<br/>Sử dụng switchđể chỉ định nhiều khối mã thay thế sẽ được thực thi<br/>Câu lệnh if<br/>Sử dụng ifcâu lệnh để chỉ định một khối mã C ++ sẽ được thực thi nếu có một điều kiện true.<br/><br/>Cú pháp<br/>if (condition) {<br/>  // block of code to be executed if the condition is true<br/>}<br/>Lưu ý rằng đó iflà chữ thường. Chữ in hoa (Nếu hoặc IF) sẽ tạo ra lỗi.<br/><br/>Trong ví dụ dưới đây, chúng tôi kiểm tra hai giá trị để tìm hiểu xem 20 có lớn hơn 18. Nếu điều kiện là true, hãy in một số văn bản:<br/><br/>Thí dụ<br/>if (20 > 18) {<br/>  cout << "20 is greater than 18";<br/>}<br/>Chúng tôi cũng có thể kiểm tra các biến:<br/><br/>Thí dụ<br/>int x = 20;<br/>int y = 18;<br/>if (x > y) {<br/>  cout << "x is greater than y";<br/>}<br/>Ví dụ giải thích<br/>Trong ví dụ trên, chúng tôi sử dụng hai biến x và y để kiểm tra xem x có lớn hơn y không (sử dụng >toán tử). Vì x là 20 và y là 18 và chúng tôi biết rằng 20 lớn hơn 18, chúng tôi in ra màn hình rằng "x lớn hơn y".<br/><br/>Tuyên bố khác<br/>Sử dụng elsecâu lệnh để chỉ định một khối mã sẽ được thực thi nếu điều kiện là false.<br/><br/>Cú pháp<br/>if (condition) {<br/>  // block of code to be executed if the condition is true<br/>} else {<br/>  // block of code to be executed if the condition is false<br/>}<br/>Thí dụ<br/>int time = 20;<br/>if (time < 18) {<br/>  cout << "Good day.";<br/>} else {<br/>  cout << "Good evening.";<br/>}<br/>// Outputs "Good evening."<br/>Ví dụ giải thích<br/>Trong ví dụ trên, thời gian (20) lớn hơn 18, vì vậy điều kiện là false. Vì điều này, chúng tôi chuyển sang elseđiều kiện và in ra màn hình "Chào buổi tối". Nếu thời gian ít hơn 18, chương trình sẽ in "Chúc một ngày tốt lành".<br/><br/>Mặt khác nếu Statement<br/>Sử dụng else ifcâu lệnh để chỉ định một điều kiện mới nếu điều kiện đầu tiên là false.<br/><br/>Cú pháp<br/>if (condition1) {<br/>  // block of code to be executed if condition1 is true<br/>} else if (condition2) {<br/>  // block of code to be executed if the condition1 is false and condition2 is true<br/>} else {<br/>  // block of code to be executed if the condition1 is false and condition2 is false<br/>}<br/>Thí dụ<br/>int time = 22;<br/>if (time < 10) {<br/>  cout << "Good morning.";<br/>} else if (time < 20) {<br/>  cout << "Good day.";<br/>} else {<br/>  cout << "Good evening.";<br/>}<br/>// Outputs "Good evening."<br/>Ví dụ giải thích<br/>Trong ví dụ trên, thời gian (22) lớn hơn 10, vì vậy điều kiện đầu tiên là false. Điều kiện tiếp theo, trong else iftuyên bố, cũng falsevậy, vì vậy chúng tôi chuyển sang else điều kiện vì điều kiện1 và điều kiện 2 là cả hai false- và in ra màn hình "Chào buổi tối".<br/><br/>Tuy nhiên, nếu thời gian là 14, chương trình của chúng tôi sẽ in "Chúc một ngày tốt lành".<br/><br/>Tay ngắn Nếu ... Khác (Toán tử Ternary)<br/>Ngoài ra còn có một bàn tay ngắn nếu khác, được gọi là toán tử ternary vì nó bao gồm ba toán hạng. Nó có thể được sử dụng để thay thế nhiều dòng mã bằng một dòng duy nhất. Nó thường được sử dụng để thay thế các câu lệnh đơn giản nếu khác:<br/><br/>Cú pháp<br/>variable = (condition) ? expressionTrue : expressionFalse;<br/>Thay vì viết:<br/><br/>Thí dụ<br/>int time = 20;<br/>if (time < 18) {<br/>  cout << "Good day.";<br/>} else {<br/>  cout << "Good evening.";<br/>}<br/>Bạn chỉ có thể viết:<br/><br/>Thí dụ<br/>int time = 20;<br/>string result = (time < 18) ? "Good day." : "Good evening.";<br/>cout << result;<br/>';
// 		else if(id=='switch')
// 			a='Báo cáo chuyển đổi C ++<br/>Sử dụng switchcâu lệnh để chọn một trong nhiều khối mã sẽ được thực thi.<br/><br/>Cú pháp<br/>switch(expression) {<br/>  case x:<br/>    // code block<br/>    break;<br/>  case y:<br/>    // code block<br/>    break;<br/>  default:<br/>    // code block<br/>}<br/>Đây là cách nó hoạt động:<br/><br/>Các switchbiểu thức được tính một lần.<br/>Giá trị của biểu thức được so sánh với các giá trị của mỗi case.<br/>Nếu có sự trùng khớp, khối mã liên quan được thực thi.<br/>Các từ khóa breakvà defaultlà tùy chọn, và sẽ được mô tả sau trong chương này<br/>Ví dụ dưới đây sử dụng số ngày trong tuần để tính tên ngày trong tuần:<br/><br/>Thí dụ<br/>int day = 4;<br/>switch (day) {<br/>  case 1:<br/>    cout << "Monday";<br/>    break;<br/>  case 2:<br/>    cout << "Tuesday";<br/>    break;<br/>  case 3:<br/>    cout << "Wednesday";<br/>    break;<br/>  case 4:<br/>    cout << "Thursday";<br/>    break;<br/>  case 5:<br/>    cout << "Friday";<br/>    break;<br/>  case 6:<br/>    cout << "Saturday";<br/>    break;<br/>  case 7:<br/>    cout << "Sunday";<br/>    break;<br/>}<br/>// Outputs "Thursday" (day 4)<br/>Từ khóa phá vỡ<br/>Khi C ++ đạt được một break từ khóa, nó thoát ra khỏi khối chuyển đổi.<br/><br/>Điều này sẽ dừng việc thực thi nhiều mã và trường hợp kiểm tra bên trong khối.<br/><br/>Khi một trận đấu được tìm thấy và công việc đã hoàn thành, đó là lúc để nghỉ ngơi. Không cần thử nghiệm thêm.<br/><br/>Việc ngắt có thể tiết kiệm rất nhiều thời gian thực hiện vì nó "bỏ qua" việc thực thi tất cả phần còn lại của mã trong khối chuyển đổi.<br/><br/>Từ khóa mặc định<br/>Các defaulttừ khóa xác định một số mã để chạy nếu không có trận đấu trường hợp:<br/><br/>Thí dụ<br/>int day = 4;<br/>switch (day) {<br/>  case 6:<br/>    cout << "Today is Saturday";<br/>    break;<br/>  case 7:<br/>    cout << "Today is Sunday";<br/>    break;<br/>  default:<br/>    cout << "Looking forward to the Weekend";<br/>}<br/>// Outputs "Looking forward to the Weekend"<br/>Lưu ý: Từ khóa mặc định phải được sử dụng làm câu lệnh cuối cùng trong khóa chuyển và không cần nghỉ.<br/>';
// 		else if(id=='for')
// 			a='C ++ cho vòng lặp<br/>C ++ cho vòng lặp<br/>Khi bạn biết chính xác số lần bạn muốn lặp qua một khối mã, hãy sử dụng forvòng lặp thay vì whilevòng lặp:<br/><br/>Cú pháp<br/>for (statement 1; statement 2; statement 3) {<br/>  // code block to be executed<br/>}<br/>Câu lệnh 1 được thực thi (một lần) trước khi thực thi khối mã.<br/><br/>Câu 2 xác định điều kiện để thực thi khối mã.<br/><br/>Câu lệnh 3 được thực thi (mọi lúc) sau khi khối mã được thực thi.<br/><br/>Ví dụ dưới đây sẽ in các số từ 0 đến 4:<br/><br/>Thí dụ<br/>for (int i = 0; i < 5; i++) {<br/>  cout << i << "\n";<br/>}<br/>Ví dụ giải thích<br/>Câu lệnh 1 đặt một biến trước khi vòng lặp bắt đầu (int i = 0).<br/><br/>Câu 2 xác định điều kiện để vòng lặp chạy (i phải nhỏ hơn 5). Nếu điều kiện là đúng, vòng lặp sẽ bắt đầu lại, nếu nó sai, vòng lặp sẽ kết thúc.<br/><br/>Câu lệnh 3 tăng một giá trị (i ++) mỗi lần khối mã trong vòng lặp được thực thi.<br/><br/>Một vi dụ khac<br/>Ví dụ này sẽ chỉ in các giá trị chẵn từ 0 đến 10:<br/><br/>Thí dụ<br/>for (int i = 0; i <= 10; i = i + 2) {<br/>  cout << i << "\n";<br/>}';
// 		else if(id=='while')
// 			a='C ++ trong khi vòng lặp<br/>Vòng lặp C ++<br/>Các vòng lặp có thể thực thi một khối mã miễn là đạt được một điều kiện cụ thể.<br/><br/>Vòng lặp rất tiện lợi vì chúng tiết kiệm thời gian, giảm lỗi và chúng làm cho mã dễ đọc hơn.<br/><br/>C ++ trong khi vòng lặp<br/>Các whilevòng lặp thông qua một khối mã miễn là một điều kiện được chỉ định là true:<br/><br/>Cú pháp<br/>while (condition) {<br/>  // code block to be executed<br/>}<br/>Trong ví dụ dưới đây, mã trong vòng lặp sẽ chạy, lặp đi lặp lại, miễn là một biến ( i) nhỏ hơn 5:<br/><br/>Thí dụ<br/>int i = 0;<br/>while (i < 5) {<br/>  cout << i << "\n";<br/>  i++;<br/>}<br/>Lưu ý: Đừng quên tăng biến được sử dụng trong điều kiện, nếu không vòng lặp sẽ không bao giờ kết thúc!<br/><br/>Vòng lặp Do / While<br/>Các do/whilevòng lặp là một biến thể của whilevòng lặp. Vòng lặp này sẽ thực thi khối mã một lần, trước khi kiểm tra xem điều kiện có đúng không, sau đó nó sẽ lặp lại vòng lặp miễn là điều kiện đúng.<br/><br/>Cú pháp<br/>do {<br/>  // code block to be executed<br/>}<br/>while (condition);<br/>Ví dụ dưới đây sử dụng một do/whilevòng lặp. Vòng lặp sẽ luôn được thực thi ít nhất một lần, ngay cả khi điều kiện sai, bởi vì khối mã được thực thi trước khi điều kiện được kiểm tra:<br/><br/>Thí dụ<br/>int i = 0;<br/>do {<br/>  cout << i << "\n";<br/>  i++;<br/>}<br/>while (i < 5);<br/>Đừng quên tăng biến được sử dụng trong điều kiện, nếu không vòng lặp sẽ không bao giờ kết thúc!<br/>';
// 		else if(id=='break')
// 			a='C ++ nghỉ và tiếp tục<br/>C ++ nghỉ<br/>Bạn đã thấy breaktuyên bố được sử dụng trong một chương trước của hướng dẫn này. Nó được sử dụng để "nhảy ra" một switchtuyên bố.<br/><br/>Câu breaklệnh cũng có thể được sử dụng để nhảy ra khỏi vòng lặp .<br/><br/>Ví dụ này nhảy ra khỏi vòng lặp khi ibằng 4:<br/><br/>Thí dụ<br/>for (int i = 0; i < 10; i++) {<br/>  if (i == 4) {<br/>    break;<br/>  }<br/>  cout << i << "\n";<br/>}<br/>Tiếp tục C ++<br/>Câu continuelệnh phá vỡ một lần lặp (trong vòng lặp), nếu một điều kiện được chỉ định xảy ra và tiếp tục với lần lặp tiếp theo trong vòng lặp.<br/><br/>Ví dụ này bỏ qua giá trị 4:<br/><br/>Thí dụ<br/>for (int i = 0; i < 10; i++) {<br/>  if (i == 4) {<br/>    continue;<br/>  }<br/>  cout << i << "\n";<br/>}<br/>Phá vỡ và tiếp tục trong vòng lặp While<br/>Bạn cũng có thể sử dụng breakvà continuetrong vòng lặp:<br/><br/>Ví dụ phá vỡ<br/>int i = 0;<br/>while (i < 10) {<br/>  cout << i << "\n";<br/>  i++;<br/>  if (i == 4) {<br/>    break;<br/>  }<br/>}<br/>Tiếp tục ví dụ<br/>int i = 0;<br/>while (i < 10) {<br/>  if (i == 4) {<br/>    i++;<br/>    continue;<br/>  }<br/>  cout << i << "\n";<br/>  i++;<br/>}<br/>';
// 		else if(id=='mang')
// 			a='Mảng C ++<br/>Mảng C ++<br/>Mảng được sử dụng để lưu trữ nhiều giá trị trong một biến, thay vì khai báo các biến riêng biệt cho mỗi giá trị.<br/><br/>Để khai báo một mảng, xác định loại biến, chỉ định tên của mảng theo dấu ngoặc vuông và chỉ định số phần tử cần lưu trữ:<br/><br/>string cars[4];<br/>Bây giờ chúng ta đã khai báo một biến chứa một mảng gồm bốn chuỗi. Để chèn giá trị vào nó, chúng ta có thể sử dụng một mảng bằng chữ - đặt các giá trị trong danh sách được phân tách bằng dấu phẩy, bên trong dấu ngoặc nhọn:<br/><br/>string cars[4] = {"Volvo", "BMW", "Ford", "Mazda"};<br/>Để tạo một mảng gồm ba số nguyên, bạn có thể viết:<br/><br/>int myNum[3] = {10, 20, 30};<br/>Truy cập các phần tử của một mảng<br/>Bạn truy cập một phần tử mảng bằng cách tham khảo số chỉ mục.<br/><br/>Tuyên bố này truy cập giá trị của yếu tố đầu tiên trong xe ô tô :<br/><br/>Thí dụ<br/>string cars[4] = {"Volvo", "BMW", "Ford", "Mazda"};<br/>cout << cars[0];<br/>// Outputs Volvo<br/>Lưu ý: Chỉ mục mảng bắt đầu bằng 0: [0] là phần tử đầu tiên. [1] là yếu tố thứ hai, v.v.<br/><br/>Thay đổi một phần tử mảng<br/>Để thay đổi giá trị của một yếu tố cụ thể, hãy tham khảo số chỉ mục:<br/><br/>Thí dụ<br/>cars[0] = "Opel";<br/>Thí dụ<br/>string cars[4] = {"Volvo", "BMW", "Ford", "Mazda"};<br/>cars[0] = "Opel";<br/>cout << cars[0];<br/>// Now outputs Opel instead of Volvo<br/>Lặp lại qua một mảng<br/>Bạn có thể lặp qua các phần tử mảng với for vòng lặp.<br/><br/>Ví dụ sau xuất ra tất cả các phần tử trong mảng ô tô :<br/><br/>Thí dụ<br/>string cars[4] = {"Volvo", "BMW", "Ford", "Mazda"};<br/>for(int i = 0; i < 4; i++) {<br/>  cout << cars[i] << "\n";<br/>}<br/>Kích thước mảng bỏ qua<br/>Bạn không phải xác định kích thước của mảng. Nhưng nếu bạn không, nó sẽ chỉ lớn bằng các yếu tố được chèn vào nó:<br/><br/>string cars[] = {"Volvo", "BMW", "Ford"}; // size of array is always 3<br/>Điều này là hoàn toàn tốt. Tuy nhiên, vấn đề phát sinh nếu bạn muốn có thêm không gian cho các yếu tố trong tương lai. Sau đó, bạn phải ghi đè lên các giá trị hiện có:<br/><br/>string cars[] = {"Volvo", "BMW", "Ford"};<br/>string cars[] = {"Volvo", "BMW", "Ford", "Mazda", "Tesla"};<br/>Tuy nhiên, nếu bạn chỉ định kích thước, mảng sẽ dành thêm không gian:<br/><br/>string cars[5] = {"Volvo", "BMW", "Ford"}; // size of array is 5, even though it\'s only three elements inside it<br/>Bây giờ bạn có thể thêm một yếu tố thứ tư và thứ năm mà không ghi đè lên các yếu tố khác:<br/><br/>string cars[3] = {"Mazda"};<br/>string cars[4] = {"Tesla"};<br/>Bỏ qua các yếu tố trên Tuyên bố<br/>Cũng có thể khai báo một mảng mà không chỉ định các phần tử trên khai báo và thêm chúng sau:<br/><br/>string cars[5];<br/>cars[0] = {"Volvo"};<br/>cars[1] = {"BMW"};<br/>...<br/>';
// 		else if(id=='contro')
// 			a='Con trỏ C ++<br/>Tạo con trỏ<br/>Bạn đã học được từ chương trước, rằng chúng ta có thể lấy địa chỉ bộ nhớ của một biến bằng cách sử dụng & toán tử:<br/><br/>Thí dụ<br/>string food = "Pizza"; // A food variable of type string<br/><br/>cout << food;  // Outputs the value of food (Pizza)<br/>cout << &food; // Outputs the memory address of food (0x6dfed4)<br/>Một con trỏ tuy nhiên, là một biến lưu trữ địa chỉ bộ nhớ như giá trị của nó .<br/><br/>Một biến con trỏ trỏ đến một loại dữ liệu (như inthoặc string) cùng loại và được tạo với *toán tử. Địa chỉ của biến bạn đang làm việc được gán cho con trỏ:<br/><br/>Thí dụ<br/>string food = "Pizza";  // A food variable of type string<br/>string* ptr = &food;    // A pointer variable, with the name ptr, that stores the address of food<br/><br/>// Output the value of food (Pizza)<br/>cout << food << "\n";<br/><br/>// Output the memory address of food (0x6dfed4)<br/>cout << &food << "\n";<br/><br/>// Output the memory address of food with the pointer (0x6dfed4)<br/>cout << ptr << "\n";<br/>Ví dụ giải thích<br/>Tạo một biến con trỏ với tên ptr, trỏ đến một stringbiến, bằng cách sử dụng dấu hoa thị *( string* ptr). Lưu ý rằng loại con trỏ phải khớp với loại biến bạn đang làm việc.<br/><br/>Sử dụng &toán tử để lưu địa chỉ bộ nhớ của biến được gọi foodvà gán nó cho con trỏ.<br/><br/>Bây giờ, ptrgiữ giá trị của foodđịa chỉ bộ nhớ.<br/><br/>Mẹo: Có ba cách để khai báo biến con trỏ, nhưng cách đầu tiên được ưu tiên:<br/><br/>string* mystring; // Preferred<br/>string *mystring;<br/>string * mystring;<br/>Nhận địa chỉ và giá trị bộ nhớ<br/>Trong ví dụ trên, chúng tôi đã sử dụng biến con trỏ để lấy địa chỉ bộ nhớ của một biến (được sử dụng cùng với toán tử & tham chiếu ). Tuy nhiên, bạn cũng có thể sử dụng con trỏ để lấy giá trị của biến, bằng cách sử dụng *toán tử ( toán tử dereference ):<br/><br/>Thí dụ<br/>string food = "Pizza";  // Variable declaration<br/>string* ptr = &food;    // Pointer declaration<br/><br/>// Reference: Output the memory address of food with the pointer (0x6dfed4)<br/>cout << ptr << "\n";<br/><br/>// Dereference: Output the value of food with the pointer (Pizza)<br/>cout << *ptr << "\n";<br/>Lưu ý rằng *dấu hiệu có thể gây nhầm lẫn ở đây, vì nó có hai điều khác nhau trong mã của chúng tôi:<br/><br/>Khi được sử dụng trong khai báo (chuỗi * ptr), nó tạo ra một biến con trỏ.<br/>Khi không được sử dụng trong khai báo, nó hoạt động như một toán tử dereference.<br/>Sửa đổi giá trị con trỏ<br/>Bạn cũng có thể thay đổi giá trị của con trỏ. Nhưng lưu ý rằng điều này cũng sẽ thay đổi giá trị của biến ban đầu:<br/><br/>Thí dụ<br/>string food = "Pizza";<br/>string* ptr = &food;<br/><br/>// Output the value of food (Pizza)<br/>cout << food << "\n";<br/><br/>// Output the memory address of food (0x6dfed4)<br/>cout << &food << "\n";<br/><br/>// Access the memory address of food and output its value (Pizza)<br/>cout << *ptr << "\n";<br/><br/>// Change the value of the pointer<br/>*ptr = "Hamburger";<br/><br/>// Output the new value of the pointer (Hamburger)<br/>cout << *ptr << "\n";<br/><br/>// Output the new value of the food variable (Hamburger)<br/>cout << food << "\n";<br/><br/>';
// 		else if(id=='baitap')
// 			a='';
//
// 		document.getElementById("content").innerHTML=a;
// 	});
// }

function getContent() {
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.open("GET", "demo_test.html", false);
    xmlHttp.send(null);
    var element = document.getElementById("content");
    element.innerHTML = xmlHttp.responseText;
}